@using CRMIntegration.Models
@using AppointmentApp.Helpers
@{
    ViewBag.Title = Html.Action() == "List" ? "My Appointments Requests" : "Completed Appointments";
    var appointments = ViewBag.UserAppointmentRequests as List<AppointmentReqEntity>;
    var completedAppointments = ViewBag.CompAppointments as List<CompletedAppointmentsDto>;
    Layout = "~/Views/Shared/_Layout.cshtml";
}




    <div class="container mt-4" style="margin-top: 40px";>
        <!-- Appointments Requests Section -->
        <div class="row mb-3">
            <div class="col-md-6">
                @Html.ActionLink("Request New Appointment", "Create", "Appointment", new { }, new { @class = "btn request-btn" })
            </div>

            <div class="col-md-6 text-right">
                @Html.ActionLink("Export (.xlsx)", "ExportList", "Appointment", null, new { @class = "btn export-btn", style = "margin-top: 10px;" })
            </div>
        </div>

        <!-- Filter Dropdown for Requests -->
        <h3 class="text-center">My Appointments Requests</h3>
        <div class="row mb-3">
            <div class="col-md-12 text-right">
                <select id="filterDropdown" class="form-control w-25 float-right" style="margin-bottom: 20px;" placeholder="Filter requests">
                    <option value="all" @(ViewBag.SelectedFilter == "all" ? "selected" : "")>All Request</option>
                    <option value="this-week" @(ViewBag.SelectedFilter == "this-week" ? "selected" : "")>This week</option>
                    <option value="previous-week" @(ViewBag.SelectedFilter == "previous-week" ? "selected" : "")>Previous week</option>
                    <option value="this-month" @(ViewBag.SelectedFilter == "this-month" ? "selected" : "")>This month</option>
                    <option value="previous-month" @(ViewBag.SelectedFilter == "previous-month" ? "selected" : "")>Previous month</option>
                </select>
            </div>
        </div>

        <!-- Appointments Table -->
        <div class="row">
            <div class="col-md-12">
                <div class="table-responsive">
                    <table class="table table-hover table-striped table-borderless">
                        <thead>
                            <tr>
                                <th>Discussion Subject</th>
                                <th>Preferred Days</th>
                                <th>Preferred Time</th>
                                <th>Request Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="appointmentsBody">
                            @if (appointments != null && appointments.Any())
                            {
                                foreach (var appointment in appointments)
                                {
                                    <tr>
                                        <td>@appointment.DiscussionSubject</td>
                                        <td>@appointment.PreferredDays</td>
                                        <td>@appointment.PreferredTime</td>
                                        <td>@appointment.DateCreated.ToString("dd-MM-yy HH:mm")</td>
                                        <td>@appointment.status</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center">No appointments found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div id="recordCount" class="text-center mb-3"></div>
                <nav>
                    <ul class="pagination justify-content-center" id="paginationControls">
                        <!-- Pagination will be generated here by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>

        <!-- Completed Appointments Section -->
        <div class="row mt-5">
            <div class="col-md-12">
                <h3 class="text-center">Completed Appointments</h3>

                <div class="row mb-3">
                    <div class="col-md-12 text-right">
                        @Html.ActionLink("Export (.xlsx)", "ExportCompAppList", "Appointment", null, new { @class = "btn export-btn", style = "margin-top: 10px;" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-12 text-right">
                        <select id="completedFilterDropdown" class="form-control w-25 float-right" style="margin-bottom: 20px;">
                            <option value="all" @(ViewBag.SelectedAppFilter == "all" ? "selected" : "")>All</option>
                            <option value="current-week" @(ViewBag.SelectedAppFilter == "current-week" ? "selected" : "")>Current Week</option>
                            <option value="next-week" @(ViewBag.SelectedAppFilter == "next-week" ? "selected" : "")>Next Week</option>
                            <option value="previous-week" @(ViewBag.SelectedAppFilter == "previous-week" ? "selected" : "")>Previous Week</option>
                            <option value="previous-month" @(ViewBag.SelectedAppFilter == "previous-month" ? "selected" : "")>Previous Month</option>
                        </select>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover table-striped table-borderless">
                        <thead>
                            <tr>
                                <th>Topic</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Executive Name</th>
                                <th>Relationship Manager</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="completedAppointmentsBody">
                            @if (completedAppointments != null && completedAppointments.Any())
                            {
                                foreach (var completedAppointment in completedAppointments)
                                {
                                    <tr>
                                        <td>@completedAppointment.subject</td>
                                        <td>@completedAppointment.startTime.ToString("dd-MM-yy HH:mm")</td>
                                        <td>@completedAppointment.endTime.ToString("dd-MM-yy HH:mm")</td>
                                        <td>@completedAppointment.executiveName</td>
                                        <td>@completedAppointment.relMgerName</td>
                                        <td>@completedAppointment.status</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center">No completed appointments found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div id="completedRecordCount" class="text-center mb-3"></div> <!-- Added record count for completed appointments -->
                <nav>
                    <ul class="pagination justify-content-center" id="completedPaginationControls">
                        <!-- Pagination will be generated here by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <style>
        .request-btn {
            background-color: white; /* White background */
            color: black; /* Change to your preferred text color */
            border: 1px solid black; /* Optional: border color */
        }

        .request-btn:hover {
            background-color: #0b900b; /* Grey background on hover */
            color: whitesmoke; /* Change text color to white on hover */
        }
        


        .export-btn {
            background-color: silver; /* White background */
            color: black; /* Change to your preferred text color */
            border: 1px solid black; /* Optional: border color */
        }

        .export-btn:hover {
            background-color: #218ad3; /* Grey background on hover */
            color: black; /* Change text color to white on hover */
        }

        body, html {
            height: 100%;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: whitesmoke;
        }

        /* Appointment Requests Styles */
        .table-borderless td, .table-borderless th {
            border: none;
        }

        .table thead th {
            background-color: #1d3043; /* Red for Veripark Red */
            color: white;
        }

        .table tbody td {
            background-color: #f5f5f5; /* Light grey */
        }

        /* Completed Appointments Styles */
        .completed-appointments th {
            background-color: #1d3043; /* Red for Veripark Red */
            color: white;
        }

        .completed-appointments tbody td {
            background-color: #dff0d8; 
        }

        .status {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 4px;
        }

        /* Button and Dropdown styling */
        .btn-success {
            background-color: lightgreen !important;
            border-color: lightgreen !important;
            color: white;
        }

        .btn-primary {
            background-color: #007BFF !important;
            border-color: #007BFF !important;
            color: white;
        }

        /* Responsive table */
        .table-responsive {
            overflow-x: auto;
        }
    </style>



    <script>
    document.getElementById('filterDropdown').addEventListener('change', function () {
        var filterValue = this.value;
        var url = '@Url.Action("FilterReqList", "Appointment", new { filterType = "__filterValue__", filterTypeForCompApp = "" })';
        url = url.replace("__filterValue__", filterValue);
        window.location.href = url;
    });

    document.getElementById('completedFilterDropdown').addEventListener('change', function () {
        var filterValueForCompApp = this.value;
        var url = '@Url.Action("FilterReqList", "Appointment", new { filterType = "", filterTypeForCompApp = "__filterValueForCompApp__" })';
        url = url.replace("__filterValueForCompApp__", filterValueForCompApp);
        window.location.href = url;
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Pagination for appointment requests
        const rows = Array.from(document.querySelectorAll('#appointmentsBody tr'));
        const rowsPerPage = 5;
        const totalRecords = rows.length;
        const totalPages = Math.ceil(totalRecords / rowsPerPage);
        const paginationControls = document.getElementById('paginationControls');
        const recordCountDiv = document.getElementById('recordCount');

        function displayPage(pageNumber) {
            rows.forEach(row => row.style.display = 'none');
            const start = (pageNumber - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            rows.slice(start, end).forEach(row => row.style.display = 'table-row');

            const displayedCount = Math.min(end, totalRecords);
            recordCountDiv.textContent = `${start + 1}-${displayedCount} of ${totalRecords}`;
        }

        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.className = 'page-item';
            li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
            li.addEventListener('click', function (e) {
                e.preventDefault();
                displayPage(i);
                document.querySelectorAll('.page-item').forEach(item => item.classList.remove('active'));
                li.classList.add('active');
            });
            paginationControls.appendChild(li);
        }

        displayPage(1);

        // Add status color coding for appointment requests
        rows.forEach(row => {
            const statusCell = row.cells[4];
            const statusValue = statusCell.textContent.trim();
            const statusSpan = document.createElement('span');
            statusSpan.textContent = statusValue;

            if (statusValue === "open") {
                statusSpan.style.backgroundColor = "lightSkyBlue";
            } else if (statusValue === "Meeting Setup") {
                statusSpan.style.backgroundColor = "yellow";
            } else if (statusValue === "Closed") {
                statusSpan.style.backgroundColor = "lightgreen";
            }

            statusSpan.style.padding = "5px 10px";
            statusSpan.style.borderRadius = "4px";

            statusCell.textContent = '';
            statusCell.appendChild(statusSpan);
        });

        // Pagination for completed appointments
        const completedRows = Array.from(document.querySelectorAll('#completedAppointmentsBody tr'));
        const completedRowsPerPage = 5;
        const completedTotalRecords = completedRows.length;
        const completedTotalPages = Math.ceil(completedTotalRecords / completedRowsPerPage);
        const completedPaginationControls = document.getElementById('completedPaginationControls');
        const completedRecordCountDiv = document.getElementById('completedRecordCount'); // Reference to the new record count div

        function displayCompletedPage(pageNumber) {
            completedRows.forEach(row => row.style.display = 'none');
            const start = (pageNumber - 1) * completedRowsPerPage;
            const end = start + completedRowsPerPage;
            completedRows.slice(start, end).forEach(row => row.style.display = 'table-row');

            const displayedCount = Math.min(end, completedTotalRecords);
            completedRecordCountDiv.textContent = `${start + 1}-${displayedCount} of ${completedTotalRecords}`; // Update record count
        }

        for (let i = 1; i <= completedTotalPages; i++) {
            const li = document.createElement('li');
            li.className = 'page-item';
            li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
            li.addEventListener('click', function (e) {
                e.preventDefault();
                displayCompletedPage(i);
                document.querySelectorAll('#completedPaginationControls .page-item').forEach(item => item.classList.remove('active'));
                li.classList.add('active');
            });
            completedPaginationControls.appendChild(li);
        }

        displayCompletedPage(1);

        // Add status color coding for completed appointments
        completedRows.forEach(row => {
            const statusCell = row.cells[5];
            const statusValue = statusCell.textContent.trim();
            const statusSpan = document.createElement('span');
            statusSpan.textContent = statusValue;

            if (statusValue === "Closed") {
                statusSpan.style.backgroundColor = "lightgreen";
            }
            else if (statusValue === "Work In Progress") {
                statusSpan.style.backgroundColor = "lightSkyBlue";
            }
            else if (statusValue === "Survey Requested") {
                statusSpan.style.backgroundColor = "brown";
            }
            else if (statusValue === "Awaiting Customer Inputs") {
                statusSpan.style.backgroundColor = "yellow";
            }

            statusSpan.style.padding = "5px 10px";
            statusSpan.style.borderRadius = "4px";

            statusCell.textContent = '';
            statusCell.appendChild(statusSpan);
        });
    });
    </script>

